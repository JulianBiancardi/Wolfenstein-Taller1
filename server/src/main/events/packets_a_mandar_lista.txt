Lista de Packets que se envían


/* Para anunciar fin de la conexión
 * Client<->Server
 */
DISCONNECTION PACKET

int type: 0
int player_id: I
int nothing: 0


/* Para comunicar movimientos
 * El cliente lo usa para pedir moverse en una dirección.
 * El servidor lo usa para notificarte a donde te moviste (puede ser tu mismo lugar).
 * El servidor lo usa para notificar a todos si alguien se movio.
 * Client->Server
 * Server->Client
 */
MOVE PACKET

int type: 1
int player_id: I
int dir: 0-8 
/* 0 El server lo usa para indicar que no se movió
 * 1 Up
 * 2 Up Left
 * 3 Left
 * 4 Down Left
 * 5 Down
 * 6 Down Right
 * 7 Right
 * 8 Up Right
 */


/* Para comunicar rotaciones
 * El cliente lo usa para pedir rotar en un sentido.
 * El servidor le devuelve el sentido en el que rota.
 * Client->Server
 * Server->Client
 */
ROTATE PACKET

int type: 2
int player_id: I
int dir: 1-2
/* 1 Right (sentido horario)
 * 2 Left (sentido antihorario)
 */


/* Para comunicar levantado de cosas.
 * Se puede recibir luego de moverse, disparar o ser disparado.
 * Si el player_id es el de uno mismo, se aplica. 
 * Siempre se borra del mapa el item.
 * Server->Client
 */
GRAB PACKET

int type: 3
int player_id: I
int item_id: X


/* Para comunicar que la puerta cambia de estado.
 * Server<->Client
 */
DOOR PACKET

int type: 4
int player_id: I
int door_id: X


/* Para comunicar cambio de arma
 * Los clientes son notificados de que el jugador I cambio.
 * Client->Server
 * Server->Client
 */
CHANGE GUN PACKET

int type: 5
int player_id: I
int gun_id: 1-5
/* 1 Knife
 * 2 Pistol
 * 3 Machine gun
 * 4 Chain cannon
 * 5 Rocket launcher
 */


/* Para comunicar daños o balas
 * El cliente lo usa para notificar cada uno de sus disparos.
 * El servidor lo usa para notificar que alguien perdio vida.
 * En caso de muerte, el cliente debera solamente reposicionar al jugador muerto en su spawn point
 * y soltar el drop correspondiente.
 * El servidor solo envia a clientes si el ID != -1.
 * Client->Server
 * Server->Client
 */
DAMAGE PACKET

int type: 6
int player_id: I
sHit: X, Y // ID de a que le pegaste, Daño que hiciste


/* Para hacer que el keep_running del match sea false cuando se utiliza una cola bloqueante
 * Se usa internamente en el server.
 * Cuando el reloj llega a 0 o no quedan jugadores se encola este paquete.
 * Sirve para forzar a que el juego termine cuando la cola este bloqueada.
 * Parecido a la excepcion que lanza el accept de socket.
 * Server
 */
GAME OVER PACKET

int type: 7


Lista de Packets que se envían todavia NO IMPLEMENTADOS


/* Para comunicar puertas abiertas/cerradas
 * El cliente lo usa para avisar que interactuó con una puerta
 * El servidor lo usa para avisar que interactuaron con una puerta
 * Client<->Server
 */ 
MAP PACKET

int type: TODO
sPoint door_pos: X 




/* Para anunciar una nueva conexión y solicitar un id
 * Client->Server
 * Server->Client
 */
CONNECTION PACKET

int type: TODO
=====
int player_id: 0 // Al pedir al server
int player_id: X // Al recibir del server
=====
